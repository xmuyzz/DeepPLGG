from data_utils.gradcam import gradcam
import numpy as np
import imutils
import cv2
import tensorflow


def plot_gradcam(train_img_dir, val_img_dir, output_dir):

    if input_channel == 1:
        x_train = np.load(os.path.join(train_img_dir, 'train_arr.npy'))
        x_val = np.load(os.path.join(val_img_dir, 'val_arr.npy'))
    elif input_channel == 3:
        x_train = np.load(os.path.join(train_img_dir, 'train_arr_3ch.npy'))
        x_val = np.load(os.path.joub(val_img_dir, 'val_arr_3ch.npy')
	
    train_df = pd.read_pickle(os.path.join(train_img_dir, 'train_df.p'))
    val_df = pd.read_pickle(os.path.join(val_img_dir, 'val_df.p'))
    y_train = train_df['label']
    y_val = val_df['label']
    ### get the ith image for grad cam heat map
    image = x_train[i]
    label = y_train[i]
    model = model_load(os.path.join(output_dir, 'saved_model'))
    pred = model.predict(image)
#pred_class = [1 * (x[0] > = 0.5) for x in pred]
#i = np.argmax(preds[0])
    classIdx = pred
    layerName = 'conv5_block3_3_conv'
    
    ### get last conv layer name
    for idx in range(len(model.layers)):
      print(model.get_layer(index = idx).name)
   
    ### compute gradient
    icam = GradCAM(
        model=model,
        classIdx=classIdx,
        layerName=layerName
        )
    ### calculate heat map
    heatmap = icam.compute_heatmap(image)
    heatmap = cv2.resize(heatmap, (64, 64))
    ### get test image
#image = cv2.imread('/content/dog.jpg')
#image = cv2.resize(image, (32, 32))
    print(heatmap.shape, image.shape)

    ### superimpose images and heatmaps
    (heatmap, output) = icam.overlay_heatmap(heatmap, image, alpha=0.5)
    fig, ax = plt.subplots(1, 3)
    ax[0].imshow(heatmap)
    ax[1].imshow(image)
    ax[2].imshow(output)
    fn = 'grad_cam.png'
    plt.savefig(os.path.join(output_dir, fn), format='png', dpi=600)
    

