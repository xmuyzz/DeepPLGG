#----------------------------------------------------------------------
# Deep learning for classification for contrast CT;
# Transfer learning using Google Inception V3;
#-----------------------------------------------------------------------------------------
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as ss
import pickle
from sklearn.metrics import auc, roc_auc_score
from sklearn.metrics import precision_recall_curve


# ----------------------------------------------------------------------------------
# precision recall curve
# ----------------------------------------------------------------------------------
def prc_img(run_type, output_dir, prc_fn, color):

    ### determine if this is train or test
    if run_type == 'train':
        df_sum = pd.read_pickle(os.path.join(output_dir, 'df_val_pred.p'))
    if run_type == 'test':
        df_sum = pd.read_pickle(os.path.join(output_dir, 'df_test_pred.p'))
    y_true = df_sum['label'].to_numpy()
    y_pred = df_sum['y_pred'].to_numpy()
    
    precision = dict()
    recall    = dict()
    threshold = dict()
    prc_auc   = [] 
    precision, recall, threshold = precision_recall_curve(y_true, y_pred) 
    RP_2D = np.array([recall, precision])
    RP_2D = RP_2D[np.argsort(RP_2D[:, 0])]
    #prc_auc.append(auc(RP_2D[1], RP_2D[0]))
    prc_auc = auc(RP_2D[1], RP_2D[0])
    prc_auc = np.around(prc_auc, 3)
	#print('PRC AUC:', prc_auc)   
    fig = plt.figure()
    ax  = fig.add_subplot(1, 1, 1)
    ax.set_aspect('equal')
    plt.plot(
             recall,
             precision,
             color=color,
             linewidth=3,
             label='AUC %0.3f' % prc_auc
             )
    plt.xlim([0, 1.03])
    plt.ylim([0, 1.03])
    ax.axhline(y=0, color='k', linewidth=4)
    ax.axhline(y=1.03, color='k', linewidth=4)
    ax.axvline(x=0, color='k', linewidth=4)
    ax.axvline(x=1.03, color='k', linewidth=4) 
    plt.xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0], fontsize=16, fontweight='bold')
    plt.yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0], fontsize=16, fontweight='bold')
    #plt.xlabel('recall', fontweight='bold', fontsize=16)
    #plt.ylabel('precision', fontweight='bold', fontsize=16)
    plt.legend(loc='lower left', prop={'size': 14, 'weight': 'bold'}) 
    plt.grid(True)
    plt.savefig(os.path.join(output_dir, prc_fn), format='png',  dpi=600)
    #plt.show()
    plt.close()
	print('\nprc img:')
	print(prc_auc)
    
    return prc_auc



    

    
